2/3
Aim: Mongo likes py

Working with pymongo

	from pymongo import MongoClient
	
	Connecting to a mongodb server and database

		server = MongoClient(<IP>)

Server
Databases
Collections
Documents


from pymongo import MongoClient
server = MongoClient('149.89.150.100')
db = server.mydb		<-- Database
c = db.students  <-- Collection
c.count() #number of records in the collection



To access databses and collections, you can user either [] or .

	db = server['mydb']
	db = server.mydb

Databases and collections are not created until a document has been added to them!

To add a document

	1. Create a dictionary
	2. Insert it to the collection

		doc = { 'name':'bob', 'age': 65}
		c.insert_one(doc) #adds single document to collection

	You can insert a list of couments with insert_many()

2/6
Aim: Where'd mongo put that data?

Retrieving data from mongodb 

	.find()
		Collection method that returns a cursor object that can be used to iterate through all the documents in a collection

	.find_one()
		Collection method that returns a single document as a dictionary

	Querying a mongodb

		.find() and .find_one() can take an argument to narrow the resulting document

		Queries in pymongo are formatted as documents

			foo.find( {'age': 25} )
			col.find( {'name': 'alison'} ) --> returns cursor
			col.find_one( {'name': 'alison'} ) --> returns document
			No error if search is empty

Search criteria can be modified using '$and', '$or' and '$not'

	foo.find_one( {
					'$and' : [ 
						{'name':'bob'}, 
						{'age': 25}
					]})

	Using inequalities in searches
		
		$gt, $lt, $gte, $lte, $ne

		foo.find( {'age': {'$gte' : 21}} )

2/8

Aim: upDAT(A)ing mongo.

Modifying data

	.delete_one(<QUERY>)
		Deletes the first document that matches the query

	.delete_many(<QUERY>)
		Deletes all the documents that match the query

	.update_one(<QUERY>, <OPERATION>)
		Updates a document that matches the query 
		
		Operation is a document that matches an udate operationL

			'$set'
				Change the value of a field

			'$unset'
				Remove a field

			'$inc'
				Increment the value of a field


2/13

Aim: Canvasing the area. 

HTML5
	Redesign of HTML with a focus on making the more "modern" features of web browsers easy to work with

	"Designed around javascript and a standardized

	Includes built in support for audio and video playback

	Includes an element that can be directly drawn on

Canvas 
	HTML5 element that provides a drawing area.
	
	Javascript functions can draw onto a canvas element.

		You must declare what context you are drawing in. 

		For example 2d drawing, 3d drawing, raw bitmap rendering...

<!DOCTYPE html>
<html>
<h1> Canvas Fun! </h1>

<canvas width="500" height="300" id="slate">
</canvas>

</html>


var ctx = c.getContext('2d');
ctx.fillRect(50,75,100,200);
ctx.fillStyle = '#ff00ff'

































